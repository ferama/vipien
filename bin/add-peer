#!/bin/bash

# loads conf. This env is set from entrypoint.sh script
. /config/vipien-env

nextip() {
    ip=$1
    ip_hex=$(printf '%.2X%.2X%.2X%.2X\n' `echo $ip | sed -e 's/\./ /g'`)
    next_ip_hex=$(printf %.8X `echo $(( 0x$ip_hex + 1 ))`)
    next_ip=$(printf '%d.%d.%d.%d\n' `echo $next_ip_hex | sed -r 's/(..)/0x\1 /g'`)
    echo "$next_ip"
}


# creates peer conf
add_peer_real() {
    name=$1
    if [ -z $name ]
    then
        echo "peer-name cannot be empty"
        echo "Usage: add-peer peer-name"
        exit 1
    fi
    # name slugify
    name=$(echo $name | iconv -t ascii//TRANSLIT | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z)

    if [ ! -e "/config/peers/$name.pub" ]
    then
        wg genkey | tee /config/peers/$name.key | wg pubkey > /config/peers/$name.pub
        server_pub=`cat /config/wg0.pub`
	    client_key=`cat /config/peers/$name.key`

        recycled_ips_file="/config/recycled_ips"

        peer_ip=""
        if [ -e "$recycled_ips_file" ]
        then
            # extract first line
            peer_ip=$(head -n 1 $recycled_ips_file)
            # remove first line from file
            sed -i 1d $recycled_ips_file
        fi
        if [ -z $peer_ip ]
        then
            peer_ip=`cat /config/nextpeerip`
            nextpeerip=$(nextip $peer_ip)
            echo $nextpeerip > /config/nextpeerip
        fi

        # create config
        cat > /config/peers/$name.conf << EOF
[Interface]
PrivateKey = $client_key
Address = $peer_ip/32
DNS = $DNS

[Peer]
PublicKey = $server_pub
AllowedIPs = $ALLOWED_IPS
Endpoint = $SERVER_PUBLIC_URL:$SERVER_PUBLIC_PORT
EOF
        cat /config/peers/$name.conf
    else
        echo "A peer with name $name is already configured"
        exit 1
    fi
}

add_peer() {
    # https://gist.github.com/jpclipffel/0b8f470be029fc9e3f07
    touch $VIPIEN_LOCKFILE
    exec {FD}<>$VIPIEN_LOCKFILE
    if flock $FD; then  
        add_peer_real $1
    fi
}

add_peer $1